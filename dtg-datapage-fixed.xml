<xml>
<Application Type="WebApp" AppKey="a0e150002177c037d053438abf13" Name="DP6_DTG_Pricing_MASTER BUNDLE" HomePageName="DP6_DTG_Pricing_MASTER BUNDLE" Version="61.145" AjaxEnabled="True" EnableSemanticMarkup="True" AllowParameters="Y" AllowCriteriaParameters="Y" UseAsyncDeployment="True" StyleTemplateId="4" LocalizationTemplateId="0">
<StandaloneRecordsetPage DataSourceType="Table" DataSourceName="Inventory" Name="DP5 Embroidery Pricing Matrix" PageHeader="<!-- DTG API Datapage - Minimal Header --> <style> /* Hide all Caspio default elements to make the datapage invisible */ body, #cbOuterAjaxCtnr_269c891950cc3e { background: transparent !important; } dl.cbResultSetPanelDataContainer, section[data-cb-name='cbTable'], .cbNavBarCtnt, footer { display: none !important; } </style>" PageFooter="<!-- DTG Pricing API - Footer Script --> <script> (function() { 'use strict'; console.log('[DTG API] Footer script initializing'); // This function will kick off the entire process once Caspio is ready. function triggerDp6Processing() { console.log('[DTG API] Triggering data processing...'); if (typeof window.initDp6ApiFetch === 'function') { // This calls the main function located in HTML Block 1 window.initDp6ApiFetch(); } else { console.error('[DTG API] FATAL: Core function initDp6ApiFetch() not found.'); } } // Caspio's official event to signal that the datapage is loaded and ready document.addEventListener('DataPageReady', function() { console.log('[DTG API] DataPageReady event received. Starting process.'); triggerDp6Processing(); }); })(); </script> " RichHeader="False" RichFooter="False" DefaultOperator="AND" ReportHeader="" ReportFooter="" Display="Columnar" ApplyDataDownloadFormatting="True" ApplyLabelsFormatting="True" RowsPerPage="25" HideNumberOfRecords="true" ColumnSorting="false" JumpToPage="False" BulkDelete="False" BulkUpdate="False" ApplyRandomSort="False" FreezeColumnsCount="0" DisplayColumns="1" TotalRows="" InlineAdd="False" Distinct="True" SearchAgainLink="False">
<CriteriaRoot>
<CriteriaGroup Type="AND">
<CriteriaItem CriteriaId="1"/>
<CriteriaItem CriteriaId="2"/>
</CriteriaGroup>
</CriteriaRoot>
<DefaultCriteria ColumnName="catalog_no">
<Match ComparisonType="=" Type="Value" EnableWildcards="False" Value="[@StyleNumber]" Operator="OR" MatchNull="N" CriteriaId="1"/>
</DefaultCriteria>
<DefaultCriteria ColumnName="catalog_color">
<Match ComparisonType="=" Type="Value" EnableWildcards="True" Value="[@COLOR]" Operator="OR" MatchNull="N" CriteriaId="2"/>
</DefaultCriteria>
<DisplayField ColumnName="catalog_no" DataType="STRING" Unique="False" KeepWithNext="False" Label="catalog no" Type="Plain Text" SortOrder="" SortDir="" DisplayOrder="1" Editable="False">
<Format Type=""/>
</DisplayField>
<DisplayField ColumnName="catalog_color" DataType="STRING" Unique="False" KeepWithNext="False" Label="catalog color" Type="Plain Text" SortOrder="" SortDir="" DisplayOrder="2" Editable="False">
<Format Type=""/>
</DisplayField>
<DisplayField ColumnName="size" DataType="STRING" Unique="False" KeepWithNext="False" Label="size" Type="Plain Text" SortOrder="" SortDir="" DisplayOrder="3" Editable="False">
<Format Type=""/>
</DisplayField>
<DisplayField ColumnName="SizeSortOrder" DataType="INTEGER" Unique="False" KeepWithNext="False" Label="Size Sort Order" Type="Plain Text" SortOrder="" SortDir="" DisplayOrder="4" Editable="False">
<Format Type=""/>
</DisplayField>
<DisplayField ColumnName="case_price" DataType="NUMBER" Unique="False" KeepWithNext="False" Label="case price" Type="Plain Text" SortOrder="" SortDir="" DisplayOrder="5" Editable="False">
<Format Type=""/>
</DisplayField>
<DisplayField ColumnName="HTML Block 1" RichUI="False" KeepWithNext="False" Label="<script> // DTG API Block 1: Data Fetching console.log('[DTG API B1] Loading data fetching module'); window.DP6_API_BASE_URL = 'https://caspio-pricing-proxy-ab30a049961a.herokuapp.com'; async function fetchApiData_dp6(url, name) { const maxRetries = 3; for (let i = 0; i < maxRetries; i++) { try { const response = await fetch(url); if (!response.ok) throw new Error(`API ${name} status: ${response.status}`); return await response.json(); } catch (error) { console.warn(`[DTG API B1] Fetch ${name} attempt ${i + 1} failed`); if (i === maxRetries - 1) throw error; await new Promise(p => setTimeout(p, 1000 * Math.pow(2, i))); } } } async function fetchCommonAndDtgData_dp6(styleNo) { console.log(`[DTG API B1] Fetching all data for style: ${styleNo}`); const baseUrl = window.DP6_API_BASE_URL; try { const [tiersR, rulesR, sizesAndAddOnsR, allDtgCostsR] = await Promise.all([ fetchApiData_dp6(`${baseUrl}/api/pricing-tiers?method=DTG`, 'Tiers'), fetchApiData_dp6(`${baseUrl}/api/pricing-rules?method=DTG`, 'Rules'), fetchApiData_dp6(`${baseUrl}/api/size-pricing?styleNumber=${styleNo}`, 'SizesAndAddOns'), fetchApiData_dp6(`${baseUrl}/api/dtg-costs`, 'AllDTGCosts') ]); // Log the DTG costs structure to understand the format console.log('[DTG API B1] DTG Costs data structure:', allDtgCostsR); return { tiersR, rulesR, sizesAndAddOnsR, allDtgCostsR }; } catch (error) { console.error('[DTG API B1] Critical data fetch error:', error); throw error; // Propagate the error up } } window.initDp6ApiFetch = async function() { console.log('[DTG API B1] Initializing data fetch...'); const params = new URLSearchParams(window.location.search); const styleNo = params.get('StyleNumber'); const clrName = params.get('COLOR') ? decodeURIComponent(params.get('COLOR').replace(/\+/g, ' ')) : null; if (!styleNo) { console.error('[DTG API B1] No StyleNumber provided in URL. Aborting.'); document.dispatchEvent(new CustomEvent('dp6DataFailed', { detail: { error: 'No StyleNumber provided' } })); return; } try { const apiData = await fetchCommonAndDtgData_dp6(styleNo); console.log('[DTG API B1] All API data fetched successfully.'); // Fire event to notify other blocks that data is ready document.dispatchEvent(new CustomEvent('dp6DataReady', { detail: { styleNumber: styleNo, colorName: clrName, apiData: apiData } })); } catch (error) { document.dispatchEvent(new CustomEvent('dp6DataFailed', { detail: { error: `API fetch failed: ${error.message}` } })); } } </script> " Type="HTML Block" AllowJS="False" SortOrder="" SortDir="" DisplayOrder="6" Editable="False"/>
<DisplayField ColumnName="HTML Block 2" RichUI="False" KeepWithNext="False" Label="<script> // DTG API Block 2: Price Calculation Engine console.log('[DTG API B2] Loading price calculation module'); function getGarmentCostDataFromCaspio() { const garmentData = {}; const dataRows = document.querySelectorAll('div[data-cb-name="data-row"]'); dataRows.forEach(row => { const labels = row.querySelectorAll('dt'); let size, price, sortOrder; labels.forEach(label => { const labelText = label.textContent.trim().toLowerCase(); if (labelText === 'size') size = label.nextElementSibling.textContent.trim().toUpperCase(); if (labelText === 'case price') price = parseFloat(label.nextElementSibling.textContent.trim()); if (labelText === 'size sort order') sortOrder = parseInt(label.nextElementSibling.textContent.trim(), 10); }); if (size && price !== undefined && sortOrder !== undefined) { garmentData[size] = { price, sortOrder }; } }); console.log('[DTG API B2] Extracted garment costs from page:', garmentData); return garmentData; } function roundUpToHalfDollar(amount) { if (isNaN(amount) || amount === null) return 0; return Math.ceil(amount * 2) / 2; } function calculatePriceProfileForLocation(garmentCostMap, locationCode, apiData) { const { tiersR, rulesR, allDtgCostsR } = apiData; if (!locationCode || !tiersR || !rulesR || !allDtgCostsR) { console.error('[DTG API B2] Missing required data for calculation', {locationCode, tiersR, rulesR, allDtgCostsR}); return null; } const individualLocCodes = locationCode.split('_'); const dtgCostsForTiers = {}; // Process each tier for (const tier of tiersR) { let totalCost = 0; let costMissing = false; // For each part of a combo location (e.g., LC_FB has LC and FB) for (const code of individualLocCodes) { // FIXED: Handle both array and object formats let locCostData = null; // If allDtgCostsR is an array (original format) if (Array.isArray(allDtgCostsR)) { locCostData = allDtgCostsR.find(c => c.Print_Location === code); if (locCostData && locCostData[tier.TierLabel] !== undefined) { totalCost += parseFloat(locCostData[tier.TierLabel]); } else { costMissing = true; break; } } // If allDtgCostsR is an object keyed by location code else if (typeof allDtgCostsR === 'object' && allDtgCostsR[code]) { if (allDtgCostsR[code][tier.TierLabel] !== undefined) { totalCost += parseFloat(allDtgCostsR[code][tier.TierLabel]); } else { costMissing = true; break; } } else { console.warn(`[DTG API B2] DTG cost data not found for location: ${code}`); costMissing = true; break; } } dtgCostsForTiers[tier.TierLabel] = costMissing ? null : totalCost; } const priceProfile = {}; for (const size in garmentCostMap) { priceProfile[size] = {}; const garmentCost = garmentCostMap[size].price; for (const tier of tiersR) { const tierLabel = tier.TierLabel; const dtgCost = dtgCostsForTiers[tierLabel]; const marginDenom = tier.MarginDenominator ? parseFloat(tier.MarginDenominator) : 0; if (dtgCost === null || !marginDenom) { priceProfile[size][tierLabel] = null; continue; } const totalCost = garmentCost + dtgCost; let finalPrice = totalCost / marginDenom; if (rulesR.RoundingMethod === 'HalfDollarUp_Final') { finalPrice = roundUpToHalfDollar(finalPrice); } priceProfile[size][tierLabel] = parseFloat(finalPrice.toFixed(2)); } } return priceProfile; } window.dp6_calculateAllLocationPrices = function(apiData) { console.log('[DTG API B2] Starting all-location price calculations.'); const garmentCostData = getGarmentCostDataFromCaspio(); if (Object.keys(garmentCostData).length === 0) { throw new Error('No garment cost data found on page.'); } const allLocationPrices = {}; const printLocations = [ 'LC', 'FF', 'FB', 'JF', 'JB', 'LC_FB', 'FF_FB', 'JF_JB', 'LC_JB' ]; printLocations.forEach(loc => { allLocationPrices[loc] = calculatePriceProfileForLocation(garmentCostData, loc, apiData); }); console.log('[DTG API B2] All location calculations complete.'); return { allLocationPrices, garmentCostData }; } </script> " Type="HTML Block" AllowJS="False" SortOrder="" SortDir="" DisplayOrder="7" Editable="False"/>
<DisplayField ColumnName="HTML Block 3" RichUI="False" KeepWithNext="False" Label="<script> // DTG API Block 3: Master Bundle Builder & Dispatcher console.log('[DTG API B3] Loading master bundle module'); function buildMasterBundle(eventDetail, calculationResult) { const { styleNumber, colorName, apiData } = eventDetail; const { allLocationPrices, garmentCostData } = calculationResult; const sortedSizes = Object.keys(garmentCostData).sort((a,b) => garmentCostData[a].sortOrder - garmentCostData[b].sortOrder); // Convert tier array to object for easier access const tierDataObj = {}; if (Array.isArray(apiData.tiersR)) { apiData.tiersR.forEach(tier => { tierDataObj[tier.TierLabel] = tier; }); } return { styleNumber: styleNumber, color: colorName, embellishmentType: 'dtg', tierData: tierDataObj, // Convert to object format rulesData: apiData.rulesR, uniqueSizes: sortedSizes, sellingPriceDisplayAddOns: apiData.sizesAndAddOnsR.sellingPriceDisplayAddOns || {}, allLocationPrices: allLocationPrices, printLocationMeta: [ { code: 'LC', name: 'Left Chest' }, { code: 'FF', name: 'Full Front' }, { code: 'FB', name: 'Full Back' }, { code: 'JF', name: 'Jumbo Front' }, { code: 'JB', name: 'Jumbo Back' }, { code: 'LC_FB', name: 'Left Chest + Full Back' }, { code: 'FF_FB', name: 'Full Front + Full Back' }, { code: 'JF_JB', name: 'Jumbo Front + Jumbo Back' }, { code: 'LC_JB', name: 'Left Chest + Jumbo Back' } ], capturedAt: new Date().toISOString(), hasError: false, errorMessage: '' }; } function dispatchToParent(payload) { if (parent && typeof parent.postMessage === 'function') { parent.postMessage(payload, '*'); console.log(`[DTG API B3] SUCCESS: Master bundle sent to parent for Style: ${payload.detail.styleNumber}.`); } else { console.error('[DTG API B3] FAILED to send to parent: parent.postMessage not available.'); } } document.addEventListener('dp6DataReady', function(e) { console.log('[DTG API B3] Event dp6DataReady received. Starting calculations.'); try { if (typeof window.dp6_calculateAllLocationPrices !== 'function') { throw new Error('Calculation function is not available.'); } const calculationResult = window.dp6_calculateAllLocationPrices(e.detail.apiData); const masterBundle = buildMasterBundle(e.detail, calculationResult); dispatchToParent({ type: 'caspioDtgMasterBundleReady', detail: masterBundle }); } catch (error) { console.error('[DTG API B3] Error during bundle creation:', error); dispatchToParent({ type: 'caspioDtgMasterBundleFailed', detail: { hasError: true, errorMessage: error.message } }); } }); document.addEventListener('dp6DataFailed', function(e) { console.error('[DTG API B3] Event dp6DataFailed received.', e.detail); dispatchToParent({ type: 'caspioDtgMasterBundleFailed', detail: { hasError: true, errorMessage: e.detail.error } }); }); </script>" Type="HTML Block" AllowJS="False" SortOrder="" SortDir="" DisplayOrder="8" Editable="False"/>
</StandaloneRecordsetPage>
<Note/>
</Application>
</xml>