<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopworks Customer Setup Training - NWCA</title>
    <link rel="icon" href="https://cdn.caspio.com/A0E15000/Safety%20Stripes/NWCA%20Favicon%20for%20TEAMNWCA.com.png?ver=1" type="image/png">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Shopworks Top Navigation Bar */
        .shopworks-nav {
            background: linear-gradient(to bottom, #4a7cc6, #2B5797);
            padding: 2px 0;
            border-bottom: 1px solid #1a3a6b;
        }

        .nav-modules {
            display: flex;
            align-items: center;
            padding: 0 10px;
        }

        .nav-module {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 5px 12px;
            color: white;
            text-decoration: none;
            font-size: 11px;
            cursor: pointer;
            transition: background 0.2s;
            border-radius: 3px;
        }

        .nav-module:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .nav-module.active {
            background: rgba(255, 255, 255, 0.2);
        }

        .nav-module i {
            font-size: 24px;
            margin-bottom: 3px;
        }

        /* Main Container */
        .main-container {
            background: #ece9d8;
            margin: 0;
            min-height: calc(100vh - 60px);
            border: 1px solid #848484;
        }

        /* Customer Header Section */
        .customer-header {
            background: #d4d0c8;
            padding: 3px 5px;
            border-bottom: 1px solid #848484;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .customer-header label {
            font-weight: bold;
            font-size: 13px;
        }

        .customer-header input {
            padding: 2px 3px;
            border: 1px solid #7f9db9;
            font-size: 11px;
            background: white;
        }

        .customer-id {
            width: 80px;
            font-weight: bold;
        }

        .company-name {
            width: 250px;
        }

        .website-field, .email-field {
            width: 200px;
        }

        /* Tab Navigation */
        .tab-nav {
            background: #d4d0c8;
            border-bottom: 1px solid #848484;
            display: flex;
            align-items: flex-end;
            padding-left: 5px;
        }

        .tab {
            padding: 4px 12px;
            background: #d4d0c8;
            border: 1px solid #848484;
            border-bottom: none;
            margin-right: 1px;
            cursor: pointer;
            font-size: 11px;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
        }

        .tab:hover {
            background: #f0f0f0;
        }

        .tab.active {
            background: #ece9d8;
            border-bottom: 1px solid #ece9d8;
            position: relative;
            z-index: 10;
            padding-bottom: 5px;
        }

        /* Action Buttons */
        .action-buttons {
            position: absolute;
            right: 10px;
            top: 5px;
            display: flex;
            gap: 5px;
        }

        .action-btn {
            padding: 2px 8px;
            font-size: 11px;
            border: 1px solid #848484;
            background: linear-gradient(to bottom, #ffffff, #d4d0c8);
            cursor: pointer;
            border-radius: 2px;
            min-width: 60px;
        }

        .action-btn:hover {
            background: linear-gradient(to bottom, #f0f0f0, #d0d0d0);
        }

        .action-btn.primary {
            background: linear-gradient(to bottom, #5cb85c, #4cae4c);
            color: white;
            border-color: #4cae4c;
        }

        /* Main Content Area */
        .content-area {
            display: flex;
            gap: 10px;
            padding: 10px;
            height: calc(100vh - 180px);
        }

        /* Left Panel - Contacts */
        .left-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        /* Contacts Section */
        .contacts-section {
            background: #ece9d8;
            border: 1px solid #848484;
            flex: 1;
        }

        .section-tabs {
            display: flex;
            background: #f0f0f0;
            border-bottom: 1px solid #ccc;
        }

        .section-tab {
            padding: 5px 15px;
            border-right: 1px solid #ccc;
            cursor: pointer;
            font-size: 12px;
        }

        .section-tab.active {
            background: white;
            font-weight: bold;
        }

        /* Contacts Grid */
        .contacts-grid {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }

        .contacts-grid th {
            background: #d4d0c8;
            padding: 3px;
            border: 1px solid #848484;
            text-align: left;
            font-weight: normal;
            position: sticky;
            top: 0;
            font-size: 11px;
        }

        .contacts-grid td {
            padding: 2px 3px;
            border: 1px solid #c0c0c0;
            font-size: 11px;
            background: white;
        }

        .contacts-grid tr:hover {
            background: #f5f5f5;
        }

        .grid-checkbox {
            width: 20px;
        }

        .sort-arrow {
            color: #2B5797;
            cursor: pointer;
            margin-left: 3px;
        }

        /* Activities Section */
        .activities-section {
            background: white;
            border: 1px solid #ccc;
            height: 200px;
        }

        .activities-filters {
            padding: 5px;
            background: #f5f5f5;
            border-bottom: 1px solid #ccc;
            display: flex;
            gap: 10px;
            align-items: center;
            font-size: 12px;
        }

        .filter-radio {
            margin-right: 3px;
        }

        /* Sales Tax Section */
        .bottom-panels {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .sales-tax-section {
            background: white;
            border: 1px solid #ccc;
            padding: 10px;
            flex: 1;
        }

        .sales-tax-section h3 {
            font-size: 13px;
            margin-bottom: 8px;
            color: #2B5797;
        }

        .tax-row {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            font-size: 12px;
        }

        .tax-row label {
            width: 80px;
        }

        .tax-row input, .tax-row select {
            padding: 1px 3px;
            border: 1px solid #7f9db9;
            font-size: 11px;
            background: white;
        }

        .tax-code {
            width: 60px;
        }

        .tax-desc {
            width: 200px;
        }

        /* Right Panel - Profile */
        .right-panel {
            width: 300px;
            background: #ece9d8;
            border: 1px solid #848484;
            padding: 5px;
        }

        .profile-header {
            background: #d4d0c8;
            padding: 3px;
            margin: -5px -5px 5px -5px;
            font-weight: bold;
            font-size: 11px;
            border-bottom: 1px solid #848484;
        }

        .profile-field {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            font-size: 12px;
        }

        .profile-field label {
            width: 100px;
            text-align: right;
            margin-right: 8px;
        }

        .profile-field input, .profile-field select {
            flex: 1;
            padding: 1px 3px;
            border: 1px solid #7f9db9;
            font-size: 11px;
            background: white;
        }

        /* Custom Fields */
        .custom-fields {
            margin-top: 20px;
            border-top: 1px solid #ccc;
            padding-top: 10px;
        }

        .custom-fields h4 {
            font-size: 13px;
            margin-bottom: 8px;
            color: #2B5797;
        }

        /* Toggle Switch - Shopworks Style */
        .toggle-switch {
            display: inline-block;
            width: 16px;
            height: 16px;
            background: #c0c0c0;
            border: 1px solid #848484;
            border-radius: 50%;
            position: relative;
            cursor: pointer;
            vertical-align: middle;
        }

        .toggle-switch.active {
            background: #40c040;
            border-color: #208020;
        }

        .toggle-switch.active::after {
            content: '✓';
            position: absolute;
            color: white;
            font-size: 10px;
            top: -1px;
            left: 2px;
        }

        /* Status Bar */
        .status-bar {
            background: #e0e0e0;
            border-top: 1px solid #999;
            padding: 3px 10px;
            display: flex;
            justify-content: space-between;
            font-size: 11px;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
        }

        /* Training Mode Overlay */
        .training-overlay {
            position: fixed;
            top: 60px;
            right: 10px;
            background: #ece9d8;
            border: 2px solid #848484;
            border-radius: 0;
            padding: 10px;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 280px;
        }

        .training-overlay h3 {
            color: #2B5797;
            margin-bottom: 10px;
        }

        .mode-selector {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-bottom: 15px;
        }

        .mode-btn {
            padding: 8px;
            background: linear-gradient(to bottom, #ffffff, #d4d0c8);
            border: 1px solid #848484;
            border-radius: 2px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.2s;
        }

        .mode-btn:hover {
            background: linear-gradient(to bottom, #e0e0e0, #d0d0d0);
            transform: translateX(5px);
        }

        .mode-btn.active {
            background: linear-gradient(to bottom, #4a7cc6, #2B5797);
            color: white;
            border: 1px solid #1a3a6b;
        }

        /* Score Display */
        .score-display {
            background: #d4d0c8;
            padding: 8px;
            border: 1px solid #848484;
            margin-top: 10px;
        }

        .score-display h4 {
            color: #2B5797;
            margin-bottom: 5px;
        }

        .score-value {
            font-size: 24px;
            font-weight: bold;
            color: #5cb85c;
        }

        /* Highlight for training */
        .highlight-field {
            animation: pulse 2s infinite;
            box-shadow: 0 0 0 2px #ffc107;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 2px #ffc107; }
            50% { box-shadow: 0 0 0 4px #ffc107, 0 0 20px rgba(255, 193, 7, 0.5); }
            100% { box-shadow: 0 0 0 2px #ffc107; }
        }

        /* Success/Error animations */
        .success-flash {
            animation: successFlash 0.5s;
        }

        @keyframes successFlash {
            0% { background: white; }
            50% { background: #d4edda; }
            100% { background: white; }
        }

        .error-flash {
            animation: errorFlash 0.5s;
        }

        @keyframes errorFlash {
            0% { background: white; }
            50% { background: #f8d7da; }
            100% { background: white; }
        }

        /* Tooltip */
        .tooltip {
            position: absolute;
            background: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 2000;
            display: none;
        }

        .tooltip.show {
            display: block;
        }

        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 3000;
        }

        .loading-content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
        }

        .loading-content h2 {
            color: #2B5797;
            margin-bottom: 10px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #2B5797;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Shopworks Navigation Bar -->
    <div class="shopworks-nav">
        <div class="nav-modules">
            <a class="nav-module">
                <i class="fas fa-dollar-sign"></i>
                <span>sales</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-shopping-cart"></i>
                <span>purchasing</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-inbox"></i>
                <span>receiving</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-industry"></i>
                <span>production</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-truck"></i>
                <span>shipping</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-file-invoice"></i>
                <span>invoicing</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-calculator"></i>
                <span>accounting</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-boxes"></i>
                <span>inventory</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-chart-line"></i>
                <span>analysis</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-cog"></i>
                <span>utilities</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-bullhorn"></i>
                <span>marketing</span>
            </a>
            <a class="nav-module active">
                <i class="fas fa-users"></i>
                <span>customers</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-box"></i>
                <span>products</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-palette"></i>
                <span>designs</span>
            </a>
            <a class="nav-module">
                <i class="fas fa-building"></i>
                <span>vendors</span>
            </a>
        </div>
    </div>

    <!-- Main Container -->
    <div class="main-container">
        <!-- Customer Header -->
        <div class="customer-header">
            <label>Company:</label>
            <input type="text" class="customer-id" id="customerId" placeholder="ID">
            <input type="text" class="company-name" id="companyName" placeholder="Company Name">
            <label>Website:</label>
            <input type="text" class="website-field" id="website" placeholder="website.com">
            <label>Main Email:</label>
            <input type="text" class="email-field" id="mainEmail" placeholder="email@domain.com">
            <div class="action-buttons">
                <button class="action-btn"><i class="fas fa-print"></i> Print</button>
                <button class="action-btn"><i class="fas fa-clone"></i> Clone</button>
                <button class="action-btn"><i class="fas fa-trash"></i> Delete</button>
                <button class="action-btn"><i class="fas fa-plus"></i> Add</button>
                <button class="action-btn primary"><i class="fas fa-check"></i> Done</button>
            </div>
        </div>

        <!-- Tab Navigation -->
        <div class="tab-nav">
            <div class="tab active">Profile</div>
            <div class="tab">Accounting</div>
            <div class="tab">Commissions</div>
            <div class="tab">Receivables</div>
            <div class="tab">Web & Email</div>
            <div class="tab">Attachments</div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Left Panel -->
            <div class="left-panel">
                <!-- Contacts Section -->
                <div class="contacts-section">
                    <div class="section-tabs">
                        <div class="section-tab active">Contacts</div>
                        <div class="section-tab">Notes</div>
                        <div class="section-tab">Addresses</div>
                    </div>
                    <div style="padding: 10px;">
                        <div style="margin-bottom: 5px;">
                            <button class="action-btn" style="font-size: 11px;"><i class="fas fa-sort"></i> Sort Tool</button>
                            <button class="action-btn" style="font-size: 11px;"><i class="fas fa-plus"></i> Add</button>
                        </div>
                        <table class="contacts-grid">
                            <thead>
                                <tr>
                                    <th style="width: 30px;"><input type="checkbox" class="grid-checkbox"></th>
                                    <th>First Name <span class="sort-arrow">▼</span></th>
                                    <th>Last Name <span class="sort-arrow">▲</span></th>
                                    <th>Title</th>
                                    <th>Department</th>
                                    <th>Primary Phone</th>
                                    <th>Primary Fax</th>
                                    <th>Primary Email Address</th>
                                </tr>
                            </thead>
                            <tbody id="contactsTableBody">
                                <!-- Contacts will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Activities Section -->
                <div class="activities-section">
                    <div class="section-tabs">
                        <div class="section-tab active">Activities (0)</div>
                        <div class="section-tab">Activities As Marketing</div>
                        <div class="section-tab">Internal Messages</div>
                    </div>
                    <div class="activities-filters">
                        <span>Filter By Source:</span>
                        <label><input type="radio" name="filter" class="filter-radio"> Profile</label>
                        <label><input type="radio" name="filter" class="filter-radio"> Receivables</label>
                        <label><input type="radio" name="filter" class="filter-radio"> Quotes</label>
                        <label><input type="radio" name="filter" class="filter-radio"> Order Entry</label>
                        <label><input type="radio" name="filter" class="filter-radio" checked> All</label>
                    </div>
                </div>

                <!-- Bottom Panels -->
                <div class="bottom-panels">
                    <!-- Sales Tax Section -->
                    <div class="sales-tax-section">
                        <h3>Sales Tax</h3>
                        <div class="tax-row">
                            <label>Account #1</label>
                            <input type="text" class="tax-code" id="taxCode1" placeholder="2200">
                            <input type="text" class="tax-desc" id="taxDesc1" value="Washington State Sales Tax" readonly>
                        </div>
                        <div class="tax-row">
                            <label>Account #2</label>
                            <input type="text" class="tax-code" id="taxCode2">
                            <input type="text" class="tax-desc" id="taxDesc2" readonly>
                        </div>
                        <div class="tax-row">
                            <label>Account #3</label>
                            <input type="text" class="tax-code" id="taxCode3">
                            <input type="text" class="tax-desc" id="taxDesc3" readonly>
                        </div>
                        <div class="tax-row">
                            <label>Account #4</label>
                            <input type="text" class="tax-code" id="taxCode4">
                            <input type="text" class="tax-desc" id="taxDesc4" readonly>
                        </div>
                        <div style="margin-top: 10px; display: flex; gap: 20px; align-items: center;">
                            <div>
                                <label style="margin-right: 5px;">Pay Sales Tax?</label>
                                <div class="toggle-switch active" id="paySalesTax"></div>
                            </div>
                            <div>
                                <label style="margin-right: 5px;">Shipping Taxable</label>
                                <div class="toggle-switch" id="shippingTaxable"></div>
                            </div>
                        </div>
                        <div style="margin-top: 10px;">
                            <label>Tax Exempt #</label>
                            <input type="text" id="taxExempt" style="width: 200px; margin-left: 10px;">
                            <label style="margin-left: 20px;">Expiration Date</label>
                            <input type="date" id="expirationDate" style="margin-left: 10px;">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Panel - Profile -->
            <div class="right-panel">
                <div class="profile-header">Profile</div>
                
                <div class="profile-field">
                    <label>Ext. Cust ID:</label>
                    <input type="text" id="extCustId" placeholder="big">
                </div>
                
                <div class="profile-field">
                    <label>Salesperson:</label>
                    <select id="salesperson">
                        <option value="">Select...</option>
                        <option value="Nika Lao">Nika Lao</option>
                        <option value="Adriyella Trujillo">Adriyella Trujillo</option>
                        <option value="Taneisha Clark">Taneisha Clark</option>
                        <option value="Ruthie Nhong">Ruthie Nhong</option>
                        <option value="Erik Mickelson">Erik Mickelson</option>
                        <option value="Jim Mickelson">Jim Mickelson</option>
                        <option value="House">House</option>
                    </select>
                </div>
                
                <div class="profile-field">
                    <label>Sales Group:</label>
                    <input type="text" id="salesGroup">
                </div>
                
                <div class="profile-field">
                    <label>Type:</label>
                    <select id="customerType">
                        <option value="">Select...</option>
                        <option value="Corporate">Corporate</option>
                        <option value="Individual">Individual</option>
                        <option value="Government">Government</option>
                        <option value="Non-Profit">Non-Profit</option>
                        <option value="School">School</option>
                        <option value="Church">Church</option>
                        <option value="Fundraising">Fundraising</option>
                        <option value="Medical">Medical</option>
                        <option value="Military">Military</option>
                        <option value="Events">Events</option>
                        <option value="AMC">AMC</option>
                    </select>
                </div>
                
                <div class="profile-field">
                    <label>Source:</label>
                    <select id="source">
                        <option value="">Select...</option>
                        <option value="Drive By">Drive By</option>
                        <option value="Referral">Referral</option>
                        <option value="Cold Call">Cold Call</option>
                        <option value="Trade Show">Trade Show</option>
                        <option value="Web">Web</option>
                    </select>
                </div>
                
                <div class="profile-field">
                    <label>Reference:</label>
                    <input type="text" id="reference">
                </div>
                
                <div class="profile-field">
                    <label>SIC Code:</label>
                    <input type="text" id="sicCode">
                </div>
                
                <div class="profile-field">
                    <label>SIC Desc.:</label>
                    <input type="text" id="sicDesc">
                </div>
                
                <div class="profile-field">
                    <label># Of Emp.:</label>
                    <input type="number" id="numEmployees">
                </div>

                <div class="custom-fields">
                    <h4>Custom Fields</h4>
                    <div class="profile-field">
                        <label>Account Tier:</label>
                        <select id="accountTier">
                            <option value="">Select...</option>
                            <option value="Gold">Gold</option>
                            <option value="Silver">Silver</option>
                            <option value="Bronze">Bronze</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Bar -->
    <div class="status-bar">
        <span>User: <strong id="currentUser">Training Mode</strong></span>
        <span>New Messages: (0)</span>
    </div>

    <!-- Training Overlay -->
    <div class="training-overlay" id="trainingOverlay">
        <h3>Training Mode</h3>
        <div class="mode-selector">
            <button class="mode-btn" onclick="startFieldExplorer()">
                <i class="fas fa-search"></i> Field Explorer
            </button>
            <button class="mode-btn" onclick="startSetupSimulator()">
                <i class="fas fa-user-plus"></i> Setup Simulator
            </button>
            <button class="mode-btn" onclick="startFieldDetective()">
                <i class="fas fa-user-secret"></i> Field Detective
            </button>
            <button class="mode-btn" onclick="startSpeedChallenge()">
                <i class="fas fa-tachometer-alt"></i> Speed Challenge
            </button>
        </div>
        
        <div id="modeContent" style="margin-top: 15px;">
            <!-- Mode-specific content will appear here -->
        </div>
        
        <div class="score-display" id="scoreDisplay" style="display: none;">
            <h4>Score</h4>
            <div class="score-value" id="scoreValue">0</div>
        </div>
    </div>

    <!-- Tooltip -->
    <div class="tooltip" id="tooltip"></div>

    <!-- Loading Screen -->
    <div class="loading-screen" id="loadingScreen" style="display: none;">
        <div class="loading-content">
            <h2>Loading Shopworks Training...</h2>
            <div class="spinner"></div>
            <p>Preparing your training environment</p>
        </div>
    </div>

    <script>
        // Training Data
        const fieldInfo = {
            companyName: {
                label: 'Company Name',
                description: 'Legal business name of the customer',
                required: true,
                validation: 'Cannot be empty, should match business license'
            },
            customerId: {
                label: 'Customer ID',
                description: 'Unique identifier assigned by Shopworks',
                required: true,
                validation: 'Auto-generated, 5-6 digits'
            },
            website: {
                label: 'Website',
                description: 'Company website URL',
                required: false,
                validation: 'Should be valid URL format'
            },
            mainEmail: {
                label: 'Main Email',
                description: 'Primary contact email for the company',
                required: true,
                validation: 'Must be valid email format'
            },
            taxCode1: {
                label: 'Tax Code',
                description: 'Primary tax classification',
                required: true,
                validation: '2200 for WA Sales Tax, 2202 for Out of State, 2203 for Wholesale'
            },
            salesperson: {
                label: 'Salesperson',
                description: 'Assigned sales representative',
                required: true,
                validation: 'Must select from dropdown'
            },
            customerType: {
                label: 'Customer Type',
                description: 'Classification of business entity',
                required: true,
                validation: 'Corporate, Individual, Government, or Non-Profit'
            },
            source: {
                label: 'Source',
                description: 'How the customer was acquired',
                required: false,
                validation: 'Select from predefined list'
            }
        };

        const setupScenarios = [
            {
                id: 1,
                title: 'New Local Restaurant',
                company: "Joe's Pizza Palace",
                location: 'Seattle, WA',
                type: 'Corporate',
                hasResaleCert: false,
                needsShipping: false,
                expectedTax: '2200',
                salesperson: 'Nika Lao',
                email: 'orders@joespizza.com',
                website: 'www.joespizza.com'
            },
            {
                id: 2,
                title: 'Online Retailer',
                company: 'TechGear Solutions',
                location: 'Portland, OR',
                type: 'Corporate',
                hasResaleCert: true,
                needsShipping: true,
                expectedTax: '2203',
                salesperson: 'Adriyella Trujillo',
                email: 'purchasing@techgear.com',
                website: 'www.techgearsolutions.com'
            },
            {
                id: 3,
                title: 'California Non-Profit',
                company: 'Youth Sports Foundation',
                location: 'Los Angeles, CA',
                type: 'Non-Profit',
                hasResaleCert: false,
                needsShipping: true,
                expectedTax: '2202',
                salesperson: 'Taneisha Clark',
                email: 'info@youthsportsfoundation.org',
                website: 'www.youthsportsfoundation.org'
            },
            {
                id: 4,
                title: 'Government Agency',
                company: 'City of Tacoma Parks Dept',
                location: 'Tacoma, WA',
                type: 'Government',
                hasResaleCert: true,
                needsShipping: false,
                expectedTax: '2203',
                salesperson: 'Ruthie Nhong',
                email: 'parks@cityoftacoma.org',
                website: 'www.cityoftacoma.org/parks'
            },
            {
                id: 5,
                title: 'Individual Event Customer',
                company: 'Personal - Sarah Johnson',
                location: 'Tacoma, WA',
                type: 'Events',
                hasResaleCert: false,
                needsShipping: false,
                expectedTax: '2200',
                salesperson: 'House',
                email: 'sarahjohnson@gmail.com',
                website: ''
            },
            {
                id: 6,
                title: 'School District',
                company: 'Puyallup School District',
                location: 'Puyallup, WA',
                type: 'School',
                hasResaleCert: true,
                needsShipping: false,
                expectedTax: '2203',
                salesperson: 'Erik Mickelson',
                email: 'purchasing@puyallupsd.org',
                website: 'www.puyallupsd.org'
            },
            {
                id: 7,
                title: 'Church Organization',
                company: 'First Baptist Church',
                location: 'Federal Way, WA',
                type: 'Church',
                hasResaleCert: true,
                needsShipping: false,
                expectedTax: '2203',
                salesperson: 'Jim Mickelson',
                email: 'office@fbcfederalway.org',
                website: 'www.fbcfederalway.org'
            }
        ];

        const detectiveScenarios = [
            {
                id: 1,
                title: 'Restaurant Setup Review',
                company: "Mike's Diner",
                customerId: '12845',
                website: 'www.mikesdiner.com',
                email: 'contact@mikesdiner.com',
                taxCode: '2203', // Wrong - should be 2200 for local
                salesperson: 'Nika Lao',
                type: 'Corporate',
                errors: ['Tax code should be 2200 for Washington state business without resale certificate']
            },
            {
                id: 2,
                title: 'Non-Profit Verification',
                company: 'Community Help Center',
                customerId: '12946',
                website: 'communityhelpenter.org', // Missing www
                email: 'info@chc.org',
                taxCode: '2200', // Wrong - should be 2203 for non-profit
                salesperson: '',  // Missing salesperson
                type: 'Non-Profit',
                errors: ['Website format incorrect', 'Tax code should be 2203 for non-profit', 'No salesperson assigned']
            },
            {
                id: 3,
                title: 'Out of State Customer',
                company: 'Nevada Sports Shop',
                customerId: '13047',
                website: 'www.nevadasports.com',
                email: 'orders@nevadasports',  // Invalid email
                taxCode: '2200', // Wrong - should be 2202
                salesperson: 'Taneisha Clark',
                type: 'Corporate',
                errors: ['Email format invalid', 'Tax code should be 2202 for out of state']
            }
        ];

        // Global variables
        let currentMode = null;
        let currentScenario = null;
        let score = 0;
        let timer = null;
        let startTime = null;

        // Progress tracking
        const progress = {
            completedScenarios: [],
            highScores: {
                fieldExplorer: 0,
                setupSimulator: 0,
                fieldDetective: 0,
                speedChallenge: 0
            },
            achievements: []
        };

        // Load progress from localStorage
        function loadProgress() {
            const saved = localStorage.getItem('shopworksTrainingProgress');
            if (saved) {
                Object.assign(progress, JSON.parse(saved));
            }
        }

        // Save progress to localStorage
        function saveProgress() {
            localStorage.setItem('shopworksTrainingProgress', JSON.stringify(progress));
        }

        // Initialize on load
        window.addEventListener('DOMContentLoaded', () => {
            loadProgress();
            initializeInterface();
            showWelcome();
        });

        function initializeInterface() {
            // Add event listeners for toggle switches
            document.getElementById('paySalesTax').addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            document.getElementById('shippingTaxable').addEventListener('click', function() {
                this.classList.toggle('active');
            });

            // Add tax code auto-fill
            const taxCodes = {
                '2200': 'Washington State Sales Tax',
                '2202': 'Out of State - No Tax',
                '2203': 'Wholesale/Resale Certificate'
            };

            for (let i = 1; i <= 4; i++) {
                const codeField = document.getElementById(`taxCode${i}`);
                const descField = document.getElementById(`taxDesc${i}`);
                
                codeField.addEventListener('input', function() {
                    const desc = taxCodes[this.value] || '';
                    descField.value = desc;
                });
            }

            // Add tooltips to fields
            addTooltips();
        }

        function addTooltips() {
            const tooltip = document.getElementById('tooltip');
            
            // Add tooltips to key fields
            const fieldsWithTooltips = [
                { id: 'companyName', text: 'Enter the legal business name' },
                { id: 'taxCode1', text: '2200: WA Tax | 2202: Out of State | 2203: Wholesale' },
                { id: 'salesperson', text: 'Assign the appropriate sales representative' },
                { id: 'customerType', text: 'Select the business entity type' }
            ];

            fieldsWithTooltips.forEach(field => {
                const element = document.getElementById(field.id);
                if (element) {
                    element.addEventListener('mouseenter', (e) => {
                        tooltip.textContent = field.text;
                        tooltip.style.left = e.pageX + 10 + 'px';
                        tooltip.style.top = e.pageY - 30 + 'px';
                        tooltip.classList.add('show');
                    });
                    
                    element.addEventListener('mouseleave', () => {
                        tooltip.classList.remove('show');
                    });
                }
            });
        }

        function showWelcome() {
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Welcome to Shopworks Training!</h4>
                <p style="font-size: 13px; line-height: 1.5;">
                    This realistic interface will help you master customer setup in Shopworks.
                </p>
                <ul style="font-size: 12px; margin-top: 10px;">
                    <li><strong>Field Explorer:</strong> Learn what each field does</li>
                    <li><strong>Setup Simulator:</strong> Practice real scenarios</li>
                    <li><strong>Field Detective:</strong> Find and fix errors</li>
                    <li><strong>Speed Challenge:</strong> Test your skills</li>
                </ul>
                <p style="font-size: 12px; margin-top: 10px; color: #666;">
                    Select a mode above to begin!
                </p>
            `;
        }

        // Field Explorer Mode
        function startFieldExplorer() {
            currentMode = 'fieldExplorer';
            clearAllHighlights();
            updateModeButtons();
            
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Field Explorer</h4>
                <p style="font-size: 12px;">Click on any field to learn about it!</p>
                <div id="fieldDescription" style="margin-top: 10px; padding: 10px; background: #f0f0f0; border-radius: 4px; min-height: 60px;">
                    <em style="color: #666;">Select a field to see details...</em>
                </div>
            `;

            // Add click handlers to all input fields
            addFieldExplorerHandlers();
        }

        function addFieldExplorerHandlers() {
            const fields = document.querySelectorAll('input, select');
            fields.forEach(field => {
                field.addEventListener('click', function(e) {
                    if (currentMode === 'fieldExplorer') {
                        e.preventDefault();
                        showFieldInfo(this);
                    }
                });
            });
        }

        function showFieldInfo(field) {
            const fieldId = field.id;
            const info = fieldInfo[fieldId];
            
            if (info) {
                const descDiv = document.getElementById('fieldDescription');
                descDiv.innerHTML = `
                    <strong>${info.label}</strong><br>
                    <span style="font-size: 12px;">${info.description}</span><br>
                    <span style="font-size: 11px; color: #666;">
                        ${info.required ? '⚠️ Required' : '📝 Optional'} | 
                        Validation: ${info.validation}
                    </span>
                `;
                
                // Highlight the field
                clearAllHighlights();
                field.classList.add('highlight-field');
            }
        }

        // Setup Simulator Mode
        function startSetupSimulator() {
            currentMode = 'setupSimulator';
            clearAllHighlights();
            clearAllFields();
            updateModeButtons();
            
            // Select random scenario
            currentScenario = setupScenarios[Math.floor(Math.random() * setupScenarios.length)];
            
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Setup Simulator</h4>
                <div style="background: #e8f4fd; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                    <strong>Scenario: ${currentScenario.title}</strong><br>
                    <span style="font-size: 12px;">
                        Company: ${currentScenario.company}<br>
                        Location: ${currentScenario.location}<br>
                        Type: ${currentScenario.type}<br>
                        Has Resale Cert: ${currentScenario.hasResaleCert ? 'Yes' : 'No'}<br>
                        Needs Shipping: ${currentScenario.needsShipping ? 'Yes' : 'No'}
                    </span>
                </div>
                <button class="action-btn primary" onclick="checkSetupAnswers()" style="width: 100%;">
                    <i class="fas fa-check"></i> Submit Setup
                </button>
                <div id="setupFeedback" style="margin-top: 10px;"></div>
            `;
            
            // Generate random customer ID
            document.getElementById('customerId').value = Math.floor(10000 + Math.random() * 90000);
            
            // Show score
            document.getElementById('scoreDisplay').style.display = 'block';
            updateScore(0);
        }

        function checkSetupAnswers() {
            let correct = 0;
            let total = 0;
            let feedback = [];

            // Check company name
            total++;
            const companyName = document.getElementById('companyName').value.trim();
            if (companyName.toLowerCase() === currentScenario.company.toLowerCase()) {
                correct++;
                feedback.push('✅ Company name correct');
            } else {
                feedback.push(`❌ Company name should be "${currentScenario.company}"`);
            }

            // Check email
            total++;
            const email = document.getElementById('mainEmail').value.trim();
            if (email === currentScenario.email) {
                correct++;
                feedback.push('✅ Email correct');
            } else {
                feedback.push(`❌ Email should be "${currentScenario.email}"`);
            }

            // Check website
            total++;
            const website = document.getElementById('website').value.trim();
            if (website === currentScenario.website) {
                correct++;
                feedback.push('✅ Website correct');
            } else {
                feedback.push(`❌ Website should be "${currentScenario.website}"`);
            }

            // Check tax code
            total++;
            const taxCode = document.getElementById('taxCode1').value;
            if (taxCode === currentScenario.expectedTax) {
                correct++;
                feedback.push('✅ Tax code correct');
            } else {
                feedback.push(`❌ Tax code should be "${currentScenario.expectedTax}"`);
            }

            // Check salesperson
            total++;
            const salesperson = document.getElementById('salesperson').value;
            if (salesperson === currentScenario.salesperson) {
                correct++;
                feedback.push('✅ Salesperson correct');
            } else {
                feedback.push(`❌ Salesperson should be "${currentScenario.salesperson}"`);
            }

            // Check customer type
            total++;
            const customerType = document.getElementById('customerType').value;
            if (customerType === currentScenario.type) {
                correct++;
                feedback.push('✅ Customer type correct');
            } else {
                feedback.push(`❌ Customer type should be "${currentScenario.type}"`);
            }

            // Calculate score
            const percentCorrect = Math.round((correct / total) * 100);
            updateScore(percentCorrect);

            // Show feedback
            const feedbackDiv = document.getElementById('setupFeedback');
            feedbackDiv.innerHTML = `
                <div style="padding: 10px; background: ${percentCorrect === 100 ? '#d4edda' : '#f8d7da'}; border-radius: 4px;">
                    <strong>Score: ${percentCorrect}%</strong><br>
                    ${feedback.join('<br>')}
                </div>
                ${percentCorrect === 100 ? 
                    '<button class="action-btn primary" onclick="startSetupSimulator()" style="margin-top: 10px; width: 100%;">Try Another Scenario</button>' :
                    '<button class="action-btn" onclick="showSetupHints()" style="margin-top: 10px; width: 100%;">Show Hints</button>'
                }
            `;

            // Save high score
            if (percentCorrect > progress.highScores.setupSimulator) {
                progress.highScores.setupSimulator = percentCorrect;
                saveProgress();
            }
        }

        function showSetupHints() {
            const hints = [];
            
            if (currentScenario.location.includes('WA') && !currentScenario.hasResaleCert) {
                hints.push('💡 Washington state businesses without resale certificates use tax code 2200');
            }
            
            if (currentScenario.hasResaleCert) {
                hints.push('💡 Businesses with resale certificates use tax code 2203');
            }
            
            if (!currentScenario.location.includes('WA')) {
                hints.push('💡 Out-of-state businesses use tax code 2202');
            }
            
            const feedbackDiv = document.getElementById('setupFeedback');
            feedbackDiv.innerHTML += `
                <div style="margin-top: 10px; padding: 10px; background: #fff3cd; border-radius: 4px;">
                    <strong>Hints:</strong><br>
                    ${hints.join('<br>')}
                </div>
            `;
        }

        // Field Detective Mode
        function startFieldDetective() {
            currentMode = 'fieldDetective';
            clearAllHighlights();
            clearAllFields();
            updateModeButtons();
            
            // Select random detective scenario
            currentScenario = detectiveScenarios[Math.floor(Math.random() * detectiveScenarios.length)];
            
            // Populate fields with scenario data (including errors)
            document.getElementById('companyName').value = currentScenario.company;
            document.getElementById('customerId').value = currentScenario.customerId;
            document.getElementById('website').value = currentScenario.website;
            document.getElementById('mainEmail').value = currentScenario.email;
            document.getElementById('taxCode1').value = currentScenario.taxCode;
            document.getElementById('salesperson').value = currentScenario.salesperson;
            document.getElementById('customerType').value = currentScenario.type;
            
            // Trigger tax description update
            const taxEvent = new Event('input');
            document.getElementById('taxCode1').dispatchEvent(taxEvent);
            
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Field Detective</h4>
                <div style="background: #fff3cd; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                    <strong>Review: ${currentScenario.title}</strong><br>
                    <span style="font-size: 12px;">
                        Find and fix all errors in this customer setup.
                        There are ${currentScenario.errors.length} error(s) to find.
                    </span>
                </div>
                <button class="action-btn primary" onclick="checkDetectiveAnswers()" style="width: 100%;">
                    <i class="fas fa-search"></i> Check for Errors
                </button>
                <div id="detectiveFeedback" style="margin-top: 10px;"></div>
            `;
            
            document.getElementById('scoreDisplay').style.display = 'block';
            updateScore(0);
        }

        function checkDetectiveAnswers() {
            const errors = currentScenario.errors;
            let foundErrors = [];
            let missedErrors = [];
            
            // Check each error type
            errors.forEach(error => {
                if (error.includes('Tax code')) {
                    // Check if tax code was corrected
                    const currentTaxCode = document.getElementById('taxCode1').value;
                    let expectedCode = '';
                    
                    if (error.includes('2200')) expectedCode = '2200';
                    else if (error.includes('2202')) expectedCode = '2202';
                    else if (error.includes('2203')) expectedCode = '2203';
                    
                    if (currentTaxCode === expectedCode) {
                        foundErrors.push('✅ Tax code corrected');
                    } else {
                        missedErrors.push(`❌ ${error}`);
                    }
                }
                
                if (error.includes('Website format')) {
                    const website = document.getElementById('website').value;
                    if (website.startsWith('www.')) {
                        foundErrors.push('✅ Website format corrected');
                    } else {
                        missedErrors.push(`❌ ${error}`);
                    }
                }
                
                if (error.includes('Email format')) {
                    const email = document.getElementById('mainEmail').value;
                    if (email.includes('@') && email.includes('.')) {
                        foundErrors.push('✅ Email format corrected');
                    } else {
                        missedErrors.push(`❌ ${error}`);
                    }
                }
                
                if (error.includes('salesperson')) {
                    const salesperson = document.getElementById('salesperson').value;
                    if (salesperson !== '') {
                        foundErrors.push('✅ Salesperson assigned');
                    } else {
                        missedErrors.push(`❌ ${error}`);
                    }
                }
            });
            
            const score = Math.round((foundErrors.length / errors.length) * 100);
            updateScore(score);
            
            const feedbackDiv = document.getElementById('detectiveFeedback');
            feedbackDiv.innerHTML = `
                <div style="padding: 10px; background: ${score === 100 ? '#d4edda' : '#f8d7da'}; border-radius: 4px;">
                    <strong>Score: ${score}%</strong><br>
                    <strong>Found (${foundErrors.length}/${errors.length}):</strong><br>
                    ${foundErrors.join('<br>') || 'None'}<br>
                    ${missedErrors.length > 0 ? `<br><strong>Missed:</strong><br>${missedErrors.join('<br>')}` : ''}
                </div>
                ${score === 100 ? 
                    '<button class="action-btn primary" onclick="startFieldDetective()" style="margin-top: 10px; width: 100%;">Try Another Case</button>' :
                    ''
                }
            `;
            
            // Save high score
            if (score > progress.highScores.fieldDetective) {
                progress.highScores.fieldDetective = score;
                saveProgress();
            }
        }

        // Speed Challenge Mode
        function startSpeedChallenge() {
            currentMode = 'speedChallenge';
            clearAllHighlights();
            clearAllFields();
            updateModeButtons();
            
            score = 0;
            startTime = Date.now();
            
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Speed Challenge</h4>
                <div style="background: #d4edda; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                    <strong>Quick Setup!</strong><br>
                    <span style="font-size: 12px;">
                        Set up as many customers correctly as you can in 60 seconds!
                    </span>
                </div>
                <div id="speedTimer" style="font-size: 24px; text-align: center; color: #dc3545;">60</div>
                <div id="speedScenario" style="margin-top: 10px;"></div>
                <button class="action-btn primary" onclick="submitSpeedAnswer()" style="width: 100%; margin-top: 10px;">
                    <i class="fas fa-bolt"></i> Submit
                </button>
            `;
            
            document.getElementById('scoreDisplay').style.display = 'block';
            updateScore(0);
            
            // Start timer
            startSpeedTimer();
            showNextSpeedScenario();
        }

        function startSpeedTimer() {
            let timeLeft = 60;
            timer = setInterval(() => {
                timeLeft--;
                document.getElementById('speedTimer').textContent = timeLeft;
                
                if (timeLeft <= 10) {
                    document.getElementById('speedTimer').style.color = '#dc3545';
                }
                
                if (timeLeft <= 0) {
                    endSpeedChallenge();
                }
            }, 1000);
        }

        function showNextSpeedScenario() {
            // Generate quick scenario
            const quickScenario = {
                company: `Company ${Math.floor(Math.random() * 1000)}`,
                isLocal: Math.random() > 0.5,
                hasResale: Math.random() > 0.5
            };
            
            const expectedTax = quickScenario.isLocal && !quickScenario.hasResale ? '2200' : 
                               quickScenario.hasResale ? '2203' : '2202';
            
            currentScenario = { expectedTax };
            
            document.getElementById('speedScenario').innerHTML = `
                <div style="padding: 10px; background: #f0f0f0; border-radius: 4px;">
                    <strong>${quickScenario.company}</strong><br>
                    Location: ${quickScenario.isLocal ? 'Washington' : 'Out of State'}<br>
                    Resale Certificate: ${quickScenario.hasResale ? 'Yes' : 'No'}<br>
                    <br>
                    <strong>Enter Tax Code:</strong>
                    <input type="text" id="speedTaxCode" style="width: 80px; padding: 5px;">
                </div>
            `;
            
            document.getElementById('speedTaxCode').focus();
        }

        function submitSpeedAnswer() {
            const answer = document.getElementById('speedTaxCode').value;
            
            if (answer === currentScenario.expectedTax) {
                score += 10;
                updateScore(score);
                
                // Flash success
                document.getElementById('speedScenario').classList.add('success-flash');
                
                // Next scenario
                setTimeout(() => {
                    clearAllFields();
                    showNextSpeedScenario();
                }, 300);
            } else {
                // Flash error
                document.getElementById('speedScenario').classList.add('error-flash');
                setTimeout(() => {
                    document.getElementById('speedScenario').classList.remove('error-flash');
                }, 300);
            }
        }

        function endSpeedChallenge() {
            clearInterval(timer);
            
            const content = document.getElementById('modeContent');
            content.innerHTML = `
                <h4>Speed Challenge Complete!</h4>
                <div style="padding: 15px; background: #d4edda; border-radius: 4px; text-align: center;">
                    <div style="font-size: 36px; color: #155724; margin-bottom: 10px;">
                        ${score} points
                    </div>
                    <strong>Great job!</strong><br>
                    ${score > progress.highScores.speedChallenge ? 
                        '<span style="color: #dc3545;">🏆 NEW HIGH SCORE!</span>' : 
                        `High Score: ${progress.highScores.speedChallenge}`
                    }
                </div>
                <button class="action-btn primary" onclick="startSpeedChallenge()" style="width: 100%; margin-top: 10px;">
                    Play Again
                </button>
            `;
            
            // Save high score
            if (score > progress.highScores.speedChallenge) {
                progress.highScores.speedChallenge = score;
                saveProgress();
            }
        }

        // Utility Functions
        function updateModeButtons() {
            document.querySelectorAll('.mode-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            if (currentMode) {
                const activeBtn = document.querySelector(`.mode-btn:has(.fa-${getModeIcon(currentMode)})`);
                if (activeBtn) activeBtn.classList.add('active');
            }
        }

        function getModeIcon(mode) {
            const icons = {
                fieldExplorer: 'search',
                setupSimulator: 'user-plus',
                fieldDetective: 'user-secret',
                speedChallenge: 'tachometer-alt'
            };
            return icons[mode] || 'question';
        }

        function clearAllHighlights() {
            document.querySelectorAll('.highlight-field').forEach(el => {
                el.classList.remove('highlight-field');
            });
        }

        function clearAllFields() {
            const fieldsToClear = [
                'companyName', 'website', 'mainEmail',
                'taxCode1', 'taxCode2', 'taxCode3', 'taxCode4',
                'salesperson', 'customerType', 'source',
                'extCustId', 'salesGroup', 'reference',
                'sicCode', 'sicDesc', 'numEmployees', 'accountTier'
            ];
            
            fieldsToClear.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.value = '';
                    if (field.id.startsWith('taxCode')) {
                        const descField = document.getElementById(field.id.replace('Code', 'Desc'));
                        if (descField) descField.value = '';
                    }
                }
            });
        }

        function updateScore(newScore) {
            score = newScore;
            document.getElementById('scoreValue').textContent = score;
        }

        // Initialize sample contacts
        function initializeContacts() {
            const contacts = [
                { first: 'Jeff', last: 'Pollock', title: '', dept: '', phone: '253-670-9242', fax: '', email: 'Jeff@skylineproperties.com' },
                { first: 'Tracy', last: 'Prest', title: 'AP', dept: '', phone: '', fax: '', email: 'tracy@skylineproperties.com' },
                { first: 'Andy', last: 'Tu', title: '', dept: '', phone: '', fax: '', email: 'andy.tu66@gmail.com' }
            ];
            
            const tbody = document.getElementById('contactsTableBody');
            tbody.innerHTML = contacts.map(contact => `
                <tr>
                    <td><input type="checkbox" class="grid-checkbox"></td>
                    <td>${contact.first}</td>
                    <td>${contact.last}</td>
                    <td>${contact.title}</td>
                    <td>${contact.dept}</td>
                    <td>${contact.phone} ${contact.phone ? '📞' : ''}</td>
                    <td>${contact.fax}</td>
                    <td>${contact.email} ${contact.email ? '✉️' : ''}</td>
                </tr>
            `).join('');
        }

        // Initialize contacts on load
        initializeContacts();
    </script>
</body>
</html>